Greeting:

import time 
timestamp=time.strftime('%H:%M:%S')
hour=int(time.strftime('%H'))
print(hour)

if (hour>0 and hour<12):
    print("Good morning")
elif (hour>=12 and hour<19):
    print("Good evening")
else:
    print("Good night")

recursion:

def factorial(n):
    if (n==0 or n==1):
        return 1
    else:
        return n*factorial(n-1)
print(factorial(6))

lerning the f strings:

a="I am {} from {}"
name="Tharun"
place="Mysuru"
print(a.format(name,place))
print(f"I am {name} from {place}")

#to get 2 decimal or any number of decimal

a="for only {} rupees"
price=48.222353
print(f"for only {price:.2f} rupees")

#doc strings

def square(n):
    '''Take input number and show its square number'''   #docstring should be written rightb below the def 
    print(n**2)
square(3)
print(square.__doc__)

practicing sets:

s1={1,2,3,4,5}
s2={4,5,6,7,8,}
print(s1.union(s2))
print(s1,s2)
print(s1.intersection(s2))
#symetric difference
print(s1.union(s2)-s1.intersection(s2))
#differnce
print(s1.difference(s2))
#disjoint
print(s1.isdisjoint(s2))
#superset
s3={1,2,3,4,5,6,7,8,9}
print(s3.issuperset(s1))
#subset
print(s1.issubset(s3))
#add method
s1.add(6)
print(s1)
s1.remove(6)
print(s1)
#discard() doesn't show error 
s=s1.pop()
print(s)
#del s1
#print(s1)
s1.clear()
print(s1)

constructor:

1)
class Student:
    def __init__(self,name,semester,college):
        self.name=name
        self.semester=semester
        self.college=college
        print(f"Student objects fot {self.name} created")

    def display_details(self):
        print("name:",self.name)
        print("semester:",self.semester)
        print("college:",self.college)

2)
class Person():
    def greet(self):
        return "hello I am a Person"
class Student():
    def greet(Person):
        return "hello I am a student"
class Teacher():
    def greet(Person):
        return "hello I am a Teacher"

student=Student()
teacher=Teacher()
print(Student.greet())
print(Teacher.greet())

Learning dcictionary:

dict={
    "Tharun":"Human","pen":"object"
}
print(dict)
print(dict["Tharun"])
print(dict["pen"])

dict1={
    1:"tharun",2:"nandan",3:"soorya",4:"nikhil"
}
print(dict1[1])
print(dict1[2])
print(dict1[3])
print(dict1[4])

print(dict1.get(3))
print(dict1[1])
#get doesnot give error
print(dict1.keys())
print(dict1.values())

for key in dict1:
    print(f"For value corresponding key {key} is {dict1[key]} ")

dict.update(dict1)
print(dict)
dict.clear()
print(dict)
dict1.pop(2)
print(dict1)
dict1.popitem()
print(dict1)

loop and else:

for i in range (6):
    print(i)
    if(i == 4):
        break
else:
    print("Sorry")

#loop ends perfectly but loop doesn't break

Exception Handling:

def fuc():
    try:
        num=int(input())
        a=[1,2,3,4,5]
        print(a[num])
        return 0
    except:
        print("some error occured")
        return 1
    finally:
        print("it is always execute")
x=fuc()
print(x)


exception handling:

a=(input("Enter the number:"))
print("The multiplication of a is:")
try:
   for i in range(1,11):
    print(f"{int(a)} x {i} = {int(a)*i}")
except:
  print("Got some error in the input")

print("End of the code")

try:
  num=int(input("Enter the number:"))
  a=[0,6]
  print(a[num])
except IndexError:
  print("index error")
finally:
  print("I am always execute")

def fuc():
    try:
        num=int(input())
        a=[1,2,3,4,5]
        print(a[num])
        return 0
    except:
        print("some error occured")
        return 1
    finally:
        print("it is always execute")
x=fuc()
print(x)

#custom error:

num=int(input("Enter the number in between 7 to 9:"))
if (num<7 or num>911):
    raise ValueError ("Entered value is wrong")

lambda function:

double=lambda x: x*2
cube=lambda x: x*x*x
avg=lambda x,y : (x+y)/2
print(double(4))
print(cube(4))
print(avg(3,6))

Maping:

def cube (x):
    return x*x*x
print(cube (2))

l=[2,4,5,6,7,8]
#newl=[]
#for item in l:
#    newl.append(cube(item))
newl=list(map(cube,l))
print(newl)

filter and reduce:

def filter_func(a):
    return a>4
newnewl=list(filter(filter_func,l))
print(newnewl)

from functools import reduce 

number=[1,2,3,4,5,6]
def msum(x,y):
    return x+y 
sum=reduce(msum,number)
#sum = reduce(lambda x,y: x+y,number)
print(sum)





